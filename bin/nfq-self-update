#!/usr/bin/env node

const request = require('request');
const semver = require('semver');
const chalk = require('chalk');
const spawn = require('child_process').spawn;
const packageConfig = require('../package.json');
const inquirer = require('inquirer');

const LOGO = chalk.bold.yellow(' NFQ ');

// Ensure minimum supported node version is used
if (!semver.satisfies(process.version, packageConfig.engines.node)) {
  console.log(chalk.red(`${LOGO} You must upgrade node to ${packageConfig.engines.node}.x to use ${packageConfig.name}`));
}

function done(latestVersion) {
  inquirer.prompt([{
    type: 'confirm',
    name: 'install',
    message: 'Update the script?',
    default: true,
  }], (answers) => {
    if (answers.install) {
      const yarn = spawn('npm', ['install', `${packageConfig.name}@latest`, '-g'], { stdio: 'inherit' });

      yarn.on('exit', (error) => {
        if (!error) {
          console.log(`${LOGO} ${chalk.green(`Success! Updated to the latest ${chalk.bold(latestVersion)}`)}`);
        } else {
          console.log(`${LOGO} ${chalk.red('Error!')} - Error code: ${chalk.bold(error)}`);
        }
      });
    }
  });
}

request({
  url: `https://registry.npmjs.org/${packageConfig.name}`,
  timeout: 1000,
}, (err, res, body) => {
  if (!err && res.statusCode === 200) {
    const latestVersion = JSON.parse(body)['dist-tags'].latest;
    const localVersion = packageConfig.version;
    if (semver.lt(localVersion, latestVersion)) {
      console.log(`${LOGO} ${chalk.yellow(`A ${chalk.bold('newer version')} of ${packageConfig.name} is available!`)}`);
      console.log();
      console.log(`  latest:    ${chalk.green(latestVersion)}`);
      console.log(`  installed: ${chalk.red(localVersion)}`);
      console.log();
      done(latestVersion);
    } else {
      console.log(`${LOGO} ${chalk.green(`You have latest ${packageConfig.name} ${chalk.bold(localVersion)} version.`)}`);
    }
  } else {
    console.log(`${LOGO} ${chalk.red.bold('update error')}`);
  }
});
